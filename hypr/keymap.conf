# ██╗  ██╗███████╗██╗   ██╗███╗   ███╗ █████╗ ██████╗
# ██║ ██╔╝██╔════╝╚██╗ ██╔╝████╗ ████║██╔══██╗██╔══██╗
# █████╔╝ █████╗   ╚████╔╝ ██╔████╔██║███████║██████╔╝
# ██╔═██╗ ██╔══╝    ╚██╔╝  ██║╚██╔╝██║██╔══██║██╔═══╝
# ██║  ██╗███████╗   ██║   ██║ ╚═╝ ██║██║  ██║██║
# ╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝
# See https://wiki.hyprland.org/Configuring/Keywords
#     https://wiki.hyprland.org/Configuring/Binds

# Define variables
$mainMod = SUPER

# Assign applications
$browser = floorp
$terminal = kitty
$logoutMenu = wlogout -b 2
$fileManager = killall thunar || thunar
$menu = wofi --style ~/dotfiles/wofi/style.css
$audio = killall pavucontrol || pavucontrol

# Launching applications
bind = $mainMod, B, exec, $browser
bind = $mainMod, RETURN, exec, $terminal
bind = $mainMod, E, exec, $fileManager
bind = $mainMod, Space, exec, $menu --show drun --prompt "Run:"
bind = $mainMod, P, exec, $audio

# Open clipboard manager with mainMod + V
bind = $mainMod, V, exec, cliphist list | $menu --dmenu --allow-images --prompt "Clipboard" | cliphist decode | wl-copy 

# Color picker with mainMod + C
bind = $mainMod, C, exec, Color=$(hyprpicker -a -n -f hex) && wl-copy $Color && notify-send "Color Picker" "Copied $Color"

# Close window
bind = $mainMod, Q, killactive
bind = $mainMod SHIFT, Q, exec, $logoutMenu

# Screenshot with mainMod + S or A
$title = "Screenshot"
$saveLocation = $(if [ -d ~/OneDrive ]; then echo ~/OneDrive/Pictures/Screenshots; else echo ~/Pictures/Screenshots; fi)/Screenshot_$(date +%F-%H-%M-%S).png
bind = $mainMod, S, exec, IMG=$saveLocation && grim -g "$(slurp)" $IMG && wl-copy < $IMG && notify-send $title "Saved to $IMG"
bind = $mainMod SHIFT, S, exec, IMG=$saveLocation && grim $IMG && wl-copy < $IMG && notify-send $title "Saved to $IMG"

# Control window
bind = $mainMod, F, togglefloating
bind = $mainMod SHIFT, F, fullscreen

# Dwindle bindings
bind = $mainMod, O, togglesplit # dwindle
bind = $mainMod SHIFT, O, pseudo # dwindle

# Move focus with ALT + arrow keys
bind = $mainMod, H, movefocus, l
bind = $mainMod, L, movefocus, r
bind = $mainMod, K, movefocus, u
bind = $mainMod, J, movefocus, d

# Move active window with ALT + SHIFT + HJKL
bind = $mainMod SHIFT, H, movewindow, l
bind = $mainMod SHIFT, L, movewindow, r
bind = $mainMod SHIFT, K, movewindow, u
bind = $mainMod SHIFT, J, movewindow, d

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Special workspaces
bind = $mainMod, W, togglespecialworkspace, magic
bind = $mainMod SHIFT, W, movetoworkspace, special:magic

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Media keys
$title = "Volume"
$currentVolume = $(pactl list sinks | grep 'Volume:' | head -n 1 | awk '{print $5}')
$isMuted = $(pactl list sinks | grep 'Mute:' | head -n 1 | awk '{print $2 == "yes" ? "Muted" : "Unmuted"}')
bind = , XF86AudioRaiseVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ +5% && notify-send $title "Increased to $currentVolume"
bind = , XF86AudioLowerVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ -5% && notify-send $title "Decreased to $currentVolume"
bind = , XF86AudioMute, exec,  pactl set-sink-mute @DEFAULT_SINK@ toggle && notify-send $title "$isMuted"
bind = , XF86AudioPlay, exec, playerctl play-pause 
bind = , XF86AudioPause, exec, playerctl play-pause
bind = , XF86AudioNext, exec, playerctl next
bind = , XF86AudioPrev, exec, playerctl previous

# Screen brightness
# get current brightness and convert to percentage
$title = "Brightness"
$screenBrightness = $(brightnessctl g | awk '{print int($1 / 19200 * 100)}')%
bind = , XF86MonBrightnessUp, exec, brightnessctl s +5% && notify-send $title "Increased to $screenBrightness"
bind = , XF86MonBrightnessDown, exec, brightnessctl s 5%- && notify-send $title "Decreased to $screenBrightness"

